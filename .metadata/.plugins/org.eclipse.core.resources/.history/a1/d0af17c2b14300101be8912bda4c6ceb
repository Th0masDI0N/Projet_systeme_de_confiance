package simplepdl2pn;

import java.io.IOException;
import java.util.Collections;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.*;
import org.eclipse.emf.ecore.resource.impl.*;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

import jdk.internal.loader.Resource;
import simplepdl.*;
import petrinet.*;

public class SimplePDL2PetriNet {

    public static void main(String[] args) {
        // ðŸ”§ Initialisation EMF
        Resource.Factory.Registry registry = Resource.Factory.Registry.INSTANCE;
        registry.getExtensionToFactoryMap().put("simplepdl", new XMIResourceFactoryImpl());
        registry.getExtensionToFactoryMap().put("pn", new XMIResourceFactoryImpl());

        ResourceSet resourceSet = new ResourceSetImpl();

        // ðŸ“¥ Chargement du modÃ¨le SimplePDL
        URI modelURI = URI.createFileURI("models/My.simplepdl");
        Resource pdlResource = resourceSet.getResource(modelURI, true);
        Process process = (Process) pdlResource.getContents().get(0);

        // ðŸ§± CrÃ©ation dâ€™un nouveau modÃ¨le PetriNet
        PetrinetFactory factory = PetrinetFactory.eINSTANCE;
        PetriNet petriNet = factory.createPetriNet();
        petriNet.setName("Petri_" + process.getName());

        // ðŸ”„ Transformation des WorkDefinitions
        for (WorkDefinition wd : process.getWorkDefinitions()) {
            Place ready = createPlace(wd.getName() + "_ready");
            Place started = createPlace(wd.getName() + "_started");
            Place finished = createPlace(wd.getName() + "_finished");

            Transition start = createTransition("start_" + wd.getName());
            Transition finish = createTransition("finish_" + wd.getName());

            petriNet.getElements().addAll(java.util.List.of(ready, started, finished, start, finish));

            petriNet.getElements().addAll(java.util.List.of(
                createArc(ready, start),
                createArc(start, started),
                createArc(started, finish),
                createArc(finish, finished)
            ));
        }

        // ðŸ”— Transformation des WorkSequences
        for (WorkSequence ws : process.getWorkSequences()) {
            String pred = ws.getPredecessor().getName();
            String succ = ws.getSuccessor().getName();

            Place sourcePlace = null;
            Transition targetTransition = null;

            switch (ws.getLinkType()) {
                case START_TO_START:
                    sourcePlace = findPlace(petriNet, pred + "_started");
                    targetTransition = findTransition(petriNet, "start_" + succ);
                    break;
                case START_TO_FINISH:
                    sourcePlace = findPlace(petriNet, pred + "_started");
                    targetTransition = findTransition(petriNet, "finish_" + succ);
                    break;
                case FINISH_TO_START:
                    sourcePlace = findPlace(petriNet, pred + "_finished");
                    targetTransition = findTransition(petriNet, "start_" + succ);
                    break;
                case FINISH_TO_FINISH:
                    sourcePlace = findPlace(petriNet, pred + "_finished");
                    targetTransition = findTransition(petriNet, "finish_" + succ);
                    break;
            }

            if (sourcePlace != null && targetTransition != null) {
                Arc arc = createArc(sourcePlace, targetTransition);
                petriNet.getElements().add(arc);
            }
        }

        // ðŸ’¾ Sauvegarde du modÃ¨le PetriNet
        URI outputURI = URI.createFileURI("models/converted.pn");
        Resource outputResource = resourceSet.createResource(outputURI);
        outputResource.getContents().add(petriNet);
        try {
            outputResource.save(Collections.EMPTY_MAP);
            System.out.println("âœ… ModÃ¨le PetriNet gÃ©nÃ©rÃ© : models/converted.pn");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // ðŸ”§ Fonctions utilitaires

    private static Place createPlace(String name) {
        Place place = PetrinetFactory.eINSTANCE.createPlace();
        place.setName(name);
        return place;
    }

    private static Transition createTransition(String name) {
        Transition transition = PetrinetFactory.eINSTANCE.createTransition();
        transition.setName(name);
        return transition;
    }

    private static Arc createArc(PetriNetElement source, PetriNetElement target) {
        Arc arc = PetrinetFactory.eINSTANCE.createArc();
        arc.setSource(source);
        arc.setTarget(target);
        return arc;
    }

    private static Place findPlace(PetriNet net, String name) {
        return net.getElements().stream()
                .filter(e -> e instanceof Place && name.equals(((Place) e).getName()))
                .map(e -> (Place) e)
                .findFirst().orElse(null);
    }

    private static Transition findTransition(PetriNet net, String name) {
        return net.getElements().stream()
                .filter(e -> e instanceof Transition && name.equals(((Transition) e).getName()))
                .map(e -> (Transition) e)
                .findFirst().orElse(null);
    }
}
