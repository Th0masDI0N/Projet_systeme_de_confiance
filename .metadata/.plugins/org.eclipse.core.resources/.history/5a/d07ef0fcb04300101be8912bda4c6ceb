package simplePDL2PetriNet;

import java.io.IOException;
import java.util.Collections;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.*;
import org.eclipse.emf.ecore.resource.impl.*;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

import simplepdl.*;
import petrinet.*;

public class SimplePDL2PetriNet {

    public static void main(String[] args) {
        // Init EMF
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        reg.getExtensionToFactoryMap().put("simplepdl", new XMIResourceFactoryImpl());
        reg.getExtensionToFactoryMap().put("pn", new XMIResourceFactoryImpl());

        ResourceSet resSet = new ResourceSetImpl();

        // Charger le modèle SimplePDL
        URI modelURI = URI.createFileURI("models/My.simplepdl");
        Resource resource = resSet.getResource(modelURI, true);
        Process process = (Process) resource.getContents().get(0);

        // Créer le modèle PetriNet
        PetrinetFactory pf = PetrinetFactory.eINSTANCE;
        PetriNet petriNet = pf.createPetriNet();
        petriNet.setName("Petri_" + process.getName());

        // Transformation WorkDefinitions
        for (WorkDefinition wd : process.getWorkDefinitions()) {
            Place ready = createPlace(wd.getName() + "_ready");
            Place started = createPlace(wd.getName() + "_started");
            Place finished = createPlace(wd.getName() + "_finished");

            Transition start = createTransition("start_" + wd.getName());
            Transition finish = createTransition("finish_" + wd.getName());

            petriNet.getElements().addAll(java.util.List.of(ready, started, finished, start, finish));

            petriNet.getElements().addAll(java.util.List.of(
                createArc(ready, start),
                createArc(start, started),
                createArc(started, finish),
                createArc(finish, finished)
            ));
        }

        // Transformation WorkSequences
        for (WorkSequence ws : process.getWorkSequences()) {
            String predName = ws.getPredecessor().getName();
            String succName = ws.getSuccessor().getName();

            Place sourcePlace = null;
            Transition targetTransition = null;

            switch (ws.getLinkType()) {
                case START_TO_START:
                    sourcePlace = findPlace(petriNet, predName + "_started");
                    targetTransition = findTransition(petriNet, "start_" + succName);
                    break;
                case START_TO_FINISH:
                    sourcePlace = findPlace(petriNet, predName + "_started");
                    targetTransition = findTransition(petriNet, "finish_" + succName);
                    break;
                case FINISH_TO_START:
                    sourcePlace = findPlace(petriNet, predName + "_finished");
                    targetTransition = findTransition(petriNet, "start_" + succName);
                    break;
                case FINISH_TO_FINISH:
                    sourcePlace = findPlace(petriNet, predName + "_finished");
                    targetTransition = findTransition(petriNet, "finish_" + succName);
                    break;
            }

            if (sourcePlace != null && targetTransition != null) {
                petriNet.getElements().add(createArc(sourcePlace, targetTransition));
            }
        }

        // Sauvegarder le modèle PetriNet
        URI targetURI = URI.createFileURI("models/converted.pn");
        Resource targetRes = resSet.createResource(targetURI);
        targetRes.getContents().add(petriNet);
        try {
            targetRes.save(Collections.EMPTY_MAP);
            System.out.println("✅ Modèle PetriNet généré : models/converted.pn");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static Place createPlace(String name) {
        Place p = PetrinetFactory.eINSTANCE.createPlace();
        p.setName(name);
        return p;
    }

    private static Transition createTransition(String name) {
        Transition t = PetrinetFactory.eINSTANCE.createTransition();
        t.setName(name);
        return t;
    }

    private static Arc createArc(PetriNetElement src, PetriNetElement tgt) {
        Arc arc = PetrinetFactory.eINSTANCE.createArc();
        arc.setSource(src);
        arc.setTarget(tgt);
        return arc;
    }

    private static Place findPlace(PetriNet net, String name) {
        return net.getElements().stream()
            .filter(e -> e instanceof Place && name.equals(((Place) e).getName()))
            .map(e -> (Place) e)
            .findFirst().orElse(null);
    }

    private static Transition findTransition(PetriNet net, String name) {
        return net.getElements().stream()
            .filter(e -> e instanceof Transition && name.equals(((Transition) e).getName()))
            .map(e -> (Transition) e)
            .findFirst().orElse(null);
    }
}
